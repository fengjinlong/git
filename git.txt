1.每个机器都必须自报家门：你的名字和Email地址
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
2.创建版本库,目录下多了一个默认是隐藏的.git的目录
	$ git init
	a 用命令git add告诉Git，把文件添加到仓库$ git add .
	b 命令git commit告诉Git，把文件提交到仓库：$ git commit -m "wrote a readme  file"  -m后面输入的是本次提交的说明，可以输入任意内容
	c 运行git status命令看看结果
	d git diff顾名思义就是查看difference
	e git log命令显示从最近到最远的提交日志/如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
	f 版本回退  git reset --hard HEAD^  Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	g 前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
	  第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
	  第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
	  Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改
	h 第一次修改 -> git add -> 第二次修改 -> git add -> git commit
	i 删除文件 rm test.txt   现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit   另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：$ git checkout -- test.txt
3.远程仓库
	a 创建SSH Key。$ ssh-keygen -t rsa -C "youremail@example.com"
	b 可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	c 登陆GitHub，打开“Account settings”，“SSH Keys”页面：
4.添加远程库  git init
    $ git remote add origin git@github.com:yourname/reponame.git
    要关联一个远程库，使用命令git remote add origin git@github.com:ownname/repo-name.git；
    a  git 添加远程github仓库的时候提示错误：fatal: remote origin already exists. 先删除远程 Git 仓库$ git remote rm origin  再添加远程 Git 仓库$ git remote add origin git@github.com:FBing/java-code-generator

    关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
    此后，每次本地提交后，就可以使用命令git push origin master推送最新修改；


5.从远程库克隆  假设我们从零开发  $ git clone git@github.com:yourname/repnaem.git

6.创建与合并分支$ git checkout -b dev   命令加上-b参数表示创建并切换
    a 用git branch命令查看当前分支：
    b dev分支的工作完成，我们就可以切换回master分支$ git checkout master
    c 我们把dev分支的工作成果合并到master分支上：$ git merge dev  git merge命令用于合并指定分支到当前分支
    d 合并完成后，就可以放心地删除dev分支了：$ git branch -d dev
7.解决冲突 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。
8.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。







